 面向对象程序设计的基本概念：面向对象, 概括地说, 就是把问题抽象为对象, 设置属性(数据) , 指定事件或处理方式(代码) 来达到目的, 强调从问题域的概念到软件程序和界面的直接映射。面向对象程序设计中的概念主要包括：对象、类、数据抽象、继承、动态绑定、数据封装、多态性、消息传递。通过这些概念面向对象的思想得到了具体的体现。
     面向对象程序设计的基本特征1）对象：对象是运行期的基本实体，它是一个封装了数据和操作这些数据的代码的逻辑实体。2）类：类是具有相同类型的对象的抽象。一个对象所包含的所有数据和代码可以通过类来构造。3）封装性：封装是一种信息隐蔽技术，它体现于类的说明，是对象的重要特性。封装使数据和加工该数据的方法（函数）封装为一个整体，以实现独立性很强的模块，使得用户只能见到对象的外特性（对象能接受哪些消息，具有那些处理能力），而对象的内特性（保存内部状态的私有数据和实现加工能力的算法）对用户是隐蔽的。封装的目的在于把对象的设计者和对象者的使用分开，使用者不必知晓行为实现的细节，只须用设计者提供的消息来访问该对象。4）继承性：继承性是子类自动共享父类之间数据和方法的机制。它由类的派生功能体现。一个类直接继承其它类的全部描述，同时可修改和扩充。继承具有传递性。继承分为单继承（一个子类只有一父类）和多重继承（一个类有多个父类）。类的对象是各自封闭的，如果没继承性机制，则类对象中数据、方法就会出现大量重复。继承不仅支持系统的可重用性，而且还促进系统的可扩充性。5）多态性：对象根据所接收的消息而做出动作。同一消息为不同的对象接受时可产生完全不同的行动，这种现象称为多态性。利用多态性用户可发送一个通用的信息，而将所有的实现细节都留给接受消息的对象自行决定，如是，同一消息即可调用不同的方法。例如：Print消息被发送给一图或表时调用的打印方法与将同样的Print消息发送给一正文文件而调用的打印方法会完全不同。多态性的实现受到继承性的支持，利用类继承的层次关系，把具有通用功能的协议存放在类层次中尽可能高的地方，而将实现这一功能的不同方法置于较低层次，这样，在这些低层次上生成的对象就能给通用消息以不同的响应。在OOPL中可通过在派生类中重定义基类函数（定义为重载函数或虚函数）来实现多态性。6）动态绑定
　　绑定指的是将一个过程调用与相应代码链接起来的行为。动态绑定是指与给定的过程调用相关联的代码只有在运行期才可知的一种绑定，它是多态实现的具体形式。7）消息传递：对象之间需要相互沟通，沟通的途径就是对象之间收发信息。消息内容包括接收消息的对象的标识，需要调用的函数的标识，以及必要的信息。消息传递的概念使得对现实世界的描述更容易。



面向对象编程强调抽象、封装、继承、多态

抽象：我们在定义一个抽象类的时候，实际上就是把一类事物共有的属性和行为提取出来，形成一个物理模型（模版），这种研究问题的方法称为抽象。你可以这样来想，抽象就是一个类的最基础的东西，比方说人，他的抽象类可能就是都从母体出来，有皮肤。但具体到你是黑人，白人，还得黑人类，白人类来说明 。
封装：就是将类的属性包装起来，不让外界轻易的知道他的内部实现。只提供给你对外的接口让你来调用。好处可以增强模块的独立性。如设置属性或方法的访问权限（private、protected、public、默认）。

继承：就是从父类把它的有用的东西拿过来自己用，不用在自己去实现了，像母亲会把双眼皮传给女儿，不用她自己去割了 。

多态：一个对象变量可以指向多种实际类型的现象。一个人，在不同场合下，有不同的身份，不同的状态。比如在家里，你是父母的孩子；在学校，你就是学生；在公司，你就是老板的职员。再比如在接口总定义一个run()方法，是什么在跑，汽车还是马？通过不同类的实现来表示相似的逻辑。

顺便说一下重载和重写（覆盖）的区别：
重载：相同的方法名，不同的实现机制（通过传入不同个数或类型的参数）。当程序运行过程中自己去判断到底该调用谁。比方说打人，那么多人，当你打起群架来，该打谁就打谁，事前你也不知道。
重写：从父类继承而来的方法不能满足需要的情况下，可以将此方法的逻辑在子类中重新实现。我们最常用的就是重写toString()方法了。
